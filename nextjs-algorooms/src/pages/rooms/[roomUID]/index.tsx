// Import statements
import React, { useContext, useEffect } from 'react';
import { withPageAuthRequired } from '@auth0/nextjs-auth0';
import QuestionPanel from '@/components/pages/rooms/[roomUID]/panels/question/QuestionPanel';
import CodePanel from '@/components/pages/rooms/[roomUID]/panels/code/CodePanel';
import TextPanel from '@/components/pages/rooms/[roomUID]/panels/text/TextPanel';
import { io } from 'socket.io-client';

import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

import CodeTester from '@/components/pages/rooms/[roomUID]/panels/code/CodeTester';
import { codePanelInterface } from '@/components/pages/rooms/[roomUID]/panels/code/Interfaces';
import { textPanelInterface } from '@/components/pages/rooms/[roomUID]/panels/text/Interfaces';

///

import Split from 'react-split';
import Header from '@/components/shared/Header';
import axios from 'axios';
import { useRouter } from 'next/router';
import RoomContextLayer from '@/contexts/RoomContextLayer';
import { RoomContext } from '@/contexts/RoomContextLayer';
import Head from 'next/head';


import { Presence, RoomProvider, TextChatMessage, useMutation, useOthers, useSelf, useStorage } from '../../../../liveblocks.config';
import { LiveList } from '@liveblocks/client';
import { AppUserContext } from '@/contexts/AppUserContextLayer';

import randomColor from "randomcolor";
import RoomLoadWrapper from '@/components/pages/rooms/[roomUID]/RoomLoadWrapper';
import { ClientSideSuspense } from '@liveblocks/react';

export default ({
  exists,
  data
}: any) => {

  const router = useRouter();
  
  const {
    socket
  } = useContext(RoomContext);

  const {
    username
  } = useContext(AppUserContext);
  
  const initialPresence: Presence = {
    isTypingCode: false,
    isTypingMessage: false,
    isRunningCode: false,
    isSubmittingCode: false,
    cursorLocationData: {  },
    username,
    color: randomColor(),
    joined: Date.now()
  };

  const initialStorage = {
    uid: data.uid,
    editorText: "",
    lobbyAccess: data.lobbyAccess,
    difficulty: data.difficulty,
    topics: new LiveList<string>(data.topics),
    messages: new LiveList<TextChatMessage>(),
    host: data.host,
    language: "Python",
    startMinutes: 1,
    minutesLeft: 1,
    secondsLeft: 0,
    inRound: false
  };

  useEffect(() => {

    if (!exists)
      router.push("/404?injectable=room");
    
  }, [  ]);


  useEffect(() => {
    socket.connect();

    // socket.on('connect', () => {
    //   socket.emit("joinRoom", data.uid, socket.id);
    // });

    socket.on("members", ({ message, username }) => toast(message));
    socket.on("startRound", (username, message) => toast(message));
  });

  if (username === "")
    return <p>Loading...</p>

  return (
    <>
      <Head>
        <title>{`AlgoRooms ðŸš€ | Room: ${data.name} - ${data.uid} | Topics: ${data.topics.toString().replace(/,/gi, ", ")} | Difficulty: ${data.difficulty} | Lobby Access: ${data.lobbyAccess}`}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="bg-[#222C4A] w-screen h-screen overflow-hidden">
        {/*  */}
        <ToastContainer />
        <Header />
        <RoomContextLayer
          { ...data }
        >
          <RoomProvider
            shouldInitiallyConnect={true}
            id={data.uid}
            initialPresence={initialPresence}
            initialStorage={initialStorage}
          >
            <ClientSideSuspense fallback={<p>Loading...</p>}>
              { () => <RoomLoadWrapper /> }
            </ClientSideSuspense>
          </RoomProvider>
        </RoomContextLayer>
      </div>
    </>
  );

};

// Auth-guarding the /rooms/[roomUID] page
export const getServerSideProps = withPageAuthRequired({
  async getServerSideProps(context:any) {

    const {
      params: {
        roomUID
      }
    } = context;

    const response = await axios.get(`http://localhost:4000/api/rooms/verify/${roomUID}`).then(res => res.data);

    const {
      exists,
      roomData
    } = response;

    return {
      props: {
        exists,
        data: roomData
      },
    };
  },
});
