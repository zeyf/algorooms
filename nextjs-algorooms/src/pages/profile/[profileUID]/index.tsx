import Image from 'next/image';
import ProgressBar from '@/components/pages/profile/ProgressBar';
import { useUser } from '@auth0/nextjs-auth0/client';
import Subtitle from '@/components/pages/profile/Subtitle';
import Title from '@/components/pages/profile/Title';
import Header from '@/components/shared/Header';
import { useRouter } from 'next/router';
import axios from 'axios';
import buildRoute from '@/utilities/buildRoute';
import { useEffect } from 'react';
import Head from 'next/head';

interface DynamicProfilePageProps {
  profileExists: boolean;
  profileUID: string;
  profileData: {};
}

export default ({
  exists,
  data
}: any) => {

  const router = useRouter();

  // Essentially filter out submissions with unique questionUID.
  let uniqueSubmissions = data.submissions.reduce((accumulator, submission) => {
    const exists = accumulator.some((item) => item.questionUID === submission.questionUID);
  
    if (!exists) {
      accumulator.push(submission);
    }
  
    return accumulator;
  }, []);
  uniqueSubmissions = uniqueSubmissions.length > 10 ? uniqueSubmissions.slice(0, 10) : uniqueSubmissions

  useEffect(() => {
    if (!exists) router.push("/404?injectable=profile");
  }, []);

  if (!exists) {
    // router.push('/404?injectable=profile');
    return <></>;
  } else
    return (
      <>
        <Head>
          <title>{`AlgoRooms ðŸš€ | ${data.username}'s profile`}</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <div className="bg-gradient-to-tr from-darkAccent to to-gradientEnd w-screen h-screen flex flex-col items-center overflow-scroll">
          <Header />
          <div className="px-6 pt-6 h-full w-2/3">
            {/* First row */}
            <div className="flex flex-col h-full items-center">
              {/* User */}
                <div className='flex w-5/6 justify-center mb-4 px-3'>
                  <div className="bg-gray-800 flex-col w-2/3 h-full p-6 rounded-lg drop-shadow-lg mr-5">
                    {/* Avatar and User Info */}
                    <div>
                      <div className="flex justify-between">
                        {/* Avatar */}
                        <img
                          className="rounded-lg mr-4 mb-4 drop-shadow-lg h-1/4 w-1/4"
                          src={data.picture}
                          alt=""
                        />
                        {/* User Info */}
                        <div className="flex-col w-full">
                          <h1 className='text-white lg:text-3xl md:text-lg'>{data.username}</h1>
                          <h2 className='text-white'>Joined: {data.dateJoined}</h2>
                        </div>
                      </div>
                    </div>
                    {/* Exp bar */}
                    <div className="flex justify-between items-center">
                      {/* Level */}
                      <div className="pr-3">
                        <Subtitle text="100" alignment="left" color="white" />
                      </div>

                      {/* Exp Bar */}
                      <ProgressBar
                        backgroundColor={'bg-green-300'}
                        accentColor={'bg-green-800'}
                        numerator={3}
                        denominator={3}
                        width={'full'}
                        height={'2'}
                      />
                    </div>
                  </div>
                  <div className="w-2/3 h-auto bg-gray-800 rounded-lg drop-shadow-lg ml-5 ">
                  <h3 className='text-white text-lg m-2'>Solved Problems</h3>
                  <div className="flex-col justify-between items-center w-auto h-full pl-6">

                    {/* Easy */}
                    <section className="flex flex-col items-star m-2">
                      <div className='flex flex-row space-x-3 items-center'>
                        <Subtitle text="Easy: " alignment="left" color="white" />
                        <div className='text-white'>
                          {data.questionsSolved.simpler} / 128
                        </div>
                      </div>

                    <ProgressBar
                      backgroundColor={'bg-green-800'}
                      accentColor={'bg-green-300'}
                      numerator={data.questionsSolved.simpler} // Easy questions completed
                      denominator={128} // Total easy questions
                      width={'3/4'}
                      height={'2'}
                    />
                  </section>

                  {/* Medium */}
                  <section className="flex flex-col items-start m-2">
                    <div className='flex flex-row space-x-3 items-center'>
                      <Subtitle text="Medium: " alignment="left" color="white" />
                      <div className='text-white'>
                        {data.questionsSolved.simple} / 230
                      </div>
                    </div>

                    <ProgressBar
                      backgroundColor={'bg-yellow-800'}
                      accentColor={'bg-yellow-300'}
                      numerator={data.questionsSolved.simple}
                      denominator={230}
                      width={'3/4'}
                      height={'2'}
                    />
                  </section>

                  {/* Hard */}
                  <section className="flex flex-col items-start m-2">
                  <div className='flex flex-row space-x-3 items-center'>
                      <Subtitle text="Hard: " alignment="left" color="white" />
                      <div className='text-white'>
                        {data.questionsSolved.notSimple} / 120
                      </div>
                    </div>
                    <ProgressBar
                      backgroundColor={'bg-red-800'}
                      accentColor={'bg-red-300'}
                      numerator={data.questionsSolved.notSimple}
                      denominator={120}
                      width={'3/4'}
                      height={'2'}
                    />
                  </section>
                </div>
                </div>
              </div>
              {/* Problems */}
              
              <div className="flex flex-col h-full items-center w-full p-3">
                {/* Recently Solved Problems */}
                <div className="w-5/6 h-1/2 bg-gray-800 rounded-lg drop-shadow-lg flex flex-col">
                  <h3 className='text-white p-4 text-lg'>Recently Solved Problems</h3>
                  <div className='flex flex-col overflow-scroll h-fit'>
                  {         
                    uniqueSubmissions.map(submission => {
                      return <div className=' text-white bg-gray-700 ml-4 mb-3 rounded-lg pl-3 mr-3'>{submission.questionTitle}</div>

                    })
                  }
                  </div>
                </div>
                {/* Top Topics Solved */}
                <div className='h-1/2 w-5/6 mt-6 flex'>
                  <div className='bg-gray-800 h-full w-2/3 mr-5 rounded-lg drop-shadow-lg'>
                    <h2 className='text-white p-4 text-lg'>Top Topics</h2>
                  </div>
                  <div className='bg-gray-800 h-full w-2/3 ml-5 rounded-lg drop-shadow-lg'>
                    <h2 className='text-white p-4 text-lg'>Announcements</h2>
                  </div>
                </div>
              </div>

            </div>

          </div>
        </div>
      </>
    );
};

export async function getServerSideProps(context: any) {
  const {
    query: {
      profileUID,
    },
  } = context;

  const response = await axios
    .get(buildRoute(`/api/users/verify/${profileUID}`))
    .then((res: any) => res.data);

  const {
    exists,
    profileData
  } = response;

  return {
    props: {
      exists,
      data: profileData,
    },
  };
};